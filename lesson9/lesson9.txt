1)В базе данных shop и sample присутствуют одни и те же таблицы, учебной базы данных.
-- Переместите запись id = 1 из таблицы shop.users в таблицу sample.users.
-- Используйте транзакции.


mysql> SELECT * FROM shop.users;
+----+--------------------+-------------+---------------------+---------------------+
| id | name               | birthday_at | created_at          | updated_at          |
+----+--------------------+-------------+---------------------+---------------------+
|  1 | Геннадий           | 1990-10-05  | 2020-05-05 11:06:40 | 2020-05-05 11:06:40 |
|  2 | Наталья            | 1984-11-12  | 2020-05-05 11:06:40 | 2020-05-05 11:06:40 |
|  3 | Александр          | 1985-05-20  | 2020-05-05 11:06:40 | 2020-05-05 11:06:40 |
|  4 | Сергей             | 1988-02-14  | 2020-05-05 11:06:40 | 2020-05-05 11:06:40 |
|  5 | Иван               | 1998-01-12  | 2020-05-05 11:06:40 | 2020-05-05 11:06:40 |
|  6 | Мария              | 1992-08-29  | 2020-05-05 11:06:40 | 2020-05-05 11:06:40 |
+----+--------------------+-------------+---------------------+---------------------+
6 rows in set (0,01 sec)

mysql> SELECT * FROM sample.users;
+------+--------+
| id   | name   |
+------+--------+
|    1 | Natali |
+------+--------+
1 row in set (0,00 sec)


mysql> DELETE FROM sample.users;
Query OK, 1 row affected (0,01 sec)

mysql> SELECT * FROM sample.users;
Empty set (0,00 sec)

mysql> START TRANSACTION;
Query OK, 0 rows affected (0,01 sec)

mysql> INSERT INTO sample.users SELECT id, name FROM shop.users WHERE id=1;
Query OK, 1 row affected (0,00 sec)
Records: 1  Duplicates: 0  Warnings: 0

mysql> DELETE FROM shop.users WHERE id=1;
Query OK, 1 row affected (0,00 sec)

mysql> COMMIT;
Query OK, 0 rows affected (0,00 sec)

mysql> SELECT * FROM sample.users;
+------+------------------+
| id   | name             |
+------+------------------+
|    1 | Геннадий         |
+------+------------------+
1 row in set (0,00 sec)

mysql> SELECT * FROM shop.users;
+----+--------------------+-------------+---------------------+---------------------+
| id | name               | birthday_at | created_at          | updated_at          |
+----+--------------------+-------------+---------------------+---------------------+
|  2 | Наталья            | 1984-11-12  | 2020-05-05 11:06:40 | 2020-05-05 11:06:40 |
|  3 | Александр          | 1985-05-20  | 2020-05-05 11:06:40 | 2020-05-05 11:06:40 |
|  4 | Сергей             | 1988-02-14  | 2020-05-05 11:06:40 | 2020-05-05 11:06:40 |
|  5 | Иван               | 1998-01-12  | 2020-05-05 11:06:40 | 2020-05-05 11:06:40 |
|  6 | Мария              | 1992-08-29  | 2020-05-05 11:06:40 | 2020-05-05 11:06:40 |
+----+--------------------+-------------+---------------------+---------------------+
5 rows in set (0,00 sec)


2)Создайте представление, которое выводит название name товарной
-- позиции из таблицы products и соответствующее название каталога name
-- из таблицы catalogs.

mysql> CREATE OR REPLACE VIEW prod_cat AS SELECT p.name AS product, c.name AS catalog FROM products AS p JOIN catalogs AS c ON p.catalog_id = c.id;
Query OK, 0 rows affected (0,00 sec)

mysql> SELECT * FROM prod_cat;
+-------------------------+-----------------------------------+
| product                 | catalog                           |
+-------------------------+-----------------------------------+
| Intel Core i3-8100      | Процессоры                        |
| Intel Core i5-7400      | Процессоры                        |
| AMD FX-8320E            | Процессоры                        |
| AMD FX-8320             | Процессоры                        |
| ASUS ROG MAXIMUS X HERO | Материнские платы                 |
| Gigabyte H310M S2H      | Материнские платы                 |
| MSI B250M GAMING PRO    | Материнские платы                 |
+-------------------------+-----------------------------------+
7 rows in set (0,00 sec)



1).Создайте хранимую функцию hello(), которая будет возвращать приветствие,
-- в зависимости от текущего времени суток. С 6:00 до 12:00 функция должна
-- возвращать фразу "Доброе утро", с 12:00 до 18:00 функция должна возвращать
-- фразу "Добрый день", с 18:00 до 00:00 — "Добрый вечер", с 00:00 до 6:00 —
-- "Доброй ночи".


mysql> DROP FUNCTION IF EXISTS hello;
Query OK, 0 rows affected, 1 warning (0,00 sec)

mysql> DELIMITER -
mysql> CREATE FUNCTION hello ()
    -> RETURNS TINYTEXT NO SQL
    -> BEGIN
    ->   DECLARE hour INT;
    ->   SET hour = HOUR(NOW());
    ->   CASE
    ->     WHEN hour BETWEEN 0 AND 5 THEN
    ->       RETURN "Доброй ночи";
    ->     WHEN hour BETWEEN 6 AND 11 THEN
    ->       RETURN "Доброе утро";
    ->     WHEN hour BETWEEN 12 AND 17 THEN
    ->       RETURN "Добрый день";
    ->     WHEN hour BETWEEN 18 AND 23 THEN
    ->       RETURN "Добрый вечер";
    ->   END CASE;
    -> END-
Query OK, 0 rows affected (0,01 sec)

mysql> DELIMITER;
    -> ^C
mysql> DELIMITER ;
mysql> SELECT NOW(), hello();
+---------------------+-----------------------+
| NOW()               | hello()               |
+---------------------+-----------------------+
| 2020-05-22 15:41:52 | Добрый день           |
+---------------------+-----------------------+
1 row in set (0,01 sec)


2)В таблице products есть два текстовых поля: name с названием товара и
-- description с его описанием. Допустимо присутствие обоих полей или одного из них.
-- Ситуация, когда оба поля принимают неопределенное значение NULL неприемлема. 
-- Используя триггеры, добейтесь того, чтобы одно из этих полей или оба поля были заполнены.
-- При попытке присвоить полям NULL-значение необходимо отменить операцию.

mysql> DELIMITER --
mysql> DROP TRIGGER IF EXISTS validate_products_name_description_insert --
Query OK, 0 rows affected (0,01 sec)

mysql> CREATE TRIGGER validate_products_name_description_insert BEFORE INSERT ON products
    -> FOR EACH ROW BEGIN
    ->   IF NEW.name IS NULL AND NEW.description IS NULL THEN
    ->     SIGNAL SQLSTATE '45000'
    ->     SET MESSAGE_TEXT = 'Both name and description are NULL';
    ->   END IF;
    -> END--
Query OK, 0 rows affected (0,01 sec)

mysql> DROP TRIGGER IF EXISTS validate_products_name_description_update--
Query OK, 0 rows affected (0,01 sec)

mysql> CREATE TRIGGER validate_products_name_description_update BEFORE UPDATE ON products
    -> FOR EACH ROW BEGIN
    ->   IF NEW.name IS NULL AND NEW.description IS NULL THEN
    ->     SIGNAL SQLSTATE '45000'
    ->     SET MESSAGE_TEXT = 'Both name and description are NULL';
    ->   END IF;
    -> END--
Query OK, 0 rows affected (0,01 sec)

mysql> INSERT INTO products (name, description, price, catalog_id)
    -> VALUES  (NULL, NULL, 1.00, 2)--
ERROR 1644 (45000): Both name and description are NULL
mysql> INSERT INTO products (name, description, price, catalog_id) VALUES  ("Intel Core I7", NULL, 1.00, 2)--
Query OK, 1 row affected (0,00 sec)

mysql> UPDATE products SET name = NULL, description = NULL where id=1--
ERROR 1644 (45000): Both name and description are NULL
mysql> UPDATE products SET description = NULL where id=1--
Query OK, 1 row affected (0,00 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql> DELIMITER ;
mysql> 


